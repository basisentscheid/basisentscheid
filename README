=== Installation ===

Requirements:
- PostgreSQL, works at least with 9.1 and 9.3
- Some webserver, tested with apache and lighttpd
- PHP >= 5.4 with modules:
  - apache2, cgi or whatever you like to use to connect to the webserver
  - cli
  - postgres
  - gettext
  - session
  - unicode
- Some MTA to send mails

If you want to sign/encrypt emails:
additional requirements:
- gnupg PECL module http://pecl.php.net/package/gnupg
- GnuPG
Generate PGP keys:
$ gpg --homedir <path>/basisentscheid/var/gnupg --gen-key
Leave the passphrase empty.
Send the public key to a key server:
$ gpg --homedir <path>/basisentscheid/var/gnupg --no-permission-warning --keyserver hkp://keys.gnupg.net --send-keys <public-key-id>

The directory var/ and all subdirectories need write access for the users as which PHP runs for web (usually "apache", "www-data" or "httpd") and cli. You could use your login user for cli or a new dedicated user. In this example we assume the user "cmr" for cli and "apache" for the webserver.
# groupadd basisentscheid
# usermod -G basisentscheid -a cmr
# usermod -G basisentscheid -a apache
# cd <path>/basisentscheid/
# chgrp -R basisentscheid var/
# find var/ -type d -exec chmod 770 {} \;
# find var/ -type f -exec chmod 660 {} \;
Make sure that GnuPG keeps the group when replacing files:
# chmod g+s var/gnupg/
To make the webserver use the new group, we have to restart it:
# /etc/init.d/apache2 restart

For webserver and PHP configuration, use the provided .htaccess files or copy their contents to your webserver and PHP configuration. The latter will be required if your webserver does not support .htaccess files but is also better for performance in live environment. This command will show you all the .htaccess files and their content:
$ find . -name ".htaccess" -printf '=== %p ===\n' -exec cat {} \;
For lighttpd for example the access configuration should look like this:
        $HTTP["url"] =~ "^/(inc|cli|db|locale|var/gnupg)/|/\." {
                url.access-deny = ( "" )
        }
        $HTTP["url"] =~ "^/(test_|var/(errors|log)/)" {
                auth.backend = "htpasswd"
                auth.backend.htpasswd.userfile = "/etc/lighttpd/htpasswd"
                auth.require = ("" => (
                        "method"  => "basic",
                        "realm"   => "admin",
                        "require" => "valid-user"
                ))
        }

In your PHP cli configuration make sure the following option is set:
short_open_tag = on

Configuration:
$ cd inc/
$ cp config_example.php config.php
$ vi config.php
$ cd -

Create database:
In Postgres create an empty database and make the role you're going to use owner of the schema "public" in that database. Enter database name, role and password if needed to config.php. Then run:
$ db/recreate_schema.sh

Create first admin account:
$ cli/create_admin.php

Create test and demo data:
If you don't want to get thousands of notifications, make sure NOTIFICATION_BCC in config.php is empty.
$ cli/create_ngroups.php
$ cli/test_demo.php
$ cli/test.php
$ cli/test_ballots.php

Create cronjobs as described in cli/cron.php and cli/cron_daily.php.


=== License ===

Copyright 2014-2015 Magnus Rosenbaum <dev@cmr.cx>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
